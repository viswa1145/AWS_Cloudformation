AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC and a ELB with a EC2 Target Group Associated

Parameters:

    SSHKeyName:
        Description: 'Name of the ec2 key you need one to use this template'
        Type: 'AWS::EC2::KeyPair::KeyName'
        Default: 'choose-key'
    VpcId:
      Type: 'AWS::EC2::VPC::Id'
      Description: VpcId of your existing Virtual Private Cloud (VPC)
      ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Subnets:
      Type: 'List<AWS::EC2::Subnet::Id>'
      Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
      ConstraintDescription: >-
        must be a list of at least two existing subnets associated with at least
        two different availability zones. They should be residing in the selected
        Virtual Private Cloud.
Mappings:

    RegionToAmazonAMI:
        us-east-1:
            HVM64: ami-09479453c5cde9639
        us-east-2:
            HVM64: ami-023c8dbf8268fb3ca
        us-west-1:
            HVM64: ami-06ff511fea5db2c99
        us-west-2:
            HVM64: ami-0bb5806b2e825a199
     
        # AMI for central canada    
        # ca-central-1: 
        #       HVM64: ami-07423fb63ea0a0930
        #       
Resources:
   
    # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.micro
        KeyName:
          Ref: SSHKeyName
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install ruby -y
            sudo yum install wget -y
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo service codedeploy-agent status
      
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}


    #  # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance1:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.micro
        KeyName:
          Ref: SSHKeyName
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install ruby -y
            sudo yum install wget -y
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo service codedeploy-agent status
          
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}

    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            Ref: AmazonLinuxInstance1
          Port: 80
        - Id:
            Ref: AmazonLinuxInstance
          Port: 80
        UnhealthyThresholdCount: 3
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80


    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets: !Ref Subnets
        # Subnets:
        # - Ref: mySubnet
        # - Ref: mySubnet1


# # Outputs:
#     ALBHostName:
#         Description: 'Application Load Balancer Hostname'
#         Value:
#           !GetAtt ApplicationLoadBalancer.DNSName
#     EC2Instance:
#         Description: 'EC2 Instance'
#         Value:
#           Ref: AmazonLinuxInstance
#     EC2TargetGroup:
#         Description: 'EC2 Target Group'
#         Value:
#           Ref: EC2TargetGroup