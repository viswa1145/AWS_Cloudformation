AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC and a ELB with a EC2 Target Group Associated
Parameters:

    SSHKeyName:
        Description: 'Name of the ec2 key you need one to use this template'
        Type: 'AWS::EC2::KeyPair::KeyName'
        Default: 'choose-key'
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 0.0.0.0/0
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    VpcId:
        Type: 'AWS::EC2::VPC::Id'
        Description: VpcId of your existing Virtual Private Cloud (VPC)
        ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Subnets:
        Type: 'List<AWS::EC2::Subnet::Id>'
        Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
        ConstraintDescription: >-
            must be a list of at least two existing subnets associated with at least
            two different availability zones. They should be residing in the selected
            Virtual Private Cloud.
Mappings:
    RegionToAmazonAMI:
        us-east-1:
            HVM64: ami-09479453c5cde9639
        us-east-2:
            HVM64: ami-023c8dbf8268fb3ca
        us-west-1:
            HVM64: ami-06ff511fea5db2c99
        us-west-2:
            HVM64: ami-0bb5806b2e825a199



Resources:

    
    # EC2 Security Group Allowing Port 22 and 80 from anywhere
    InstanceSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable SSH access and HTTP access on the inbound port
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '22'
                  ToPort: '22'
                  CidrIp: !Ref SSHLocation
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0

    # # ELB Security Group allowing Port 80 from anywhere
    # ELBSecurityGroup:
    #     Type: AWS::EC2::SecurityGroup
    #     Properties:
    #         GroupDescription: 'SSH and Port 80'
    #         VpcId:
    #           Ref: VPC
    #         SecurityGroupIngress:
    #             - IpProtocol: tcp
    #               FromPort: 80
    #               ToPort: 80
    #               CidrIp: 0.0.0.0/0

    # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.nano
        KeyName:
          Ref: SSHKeyName
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install ruby -y
            sudo yum install wget -y
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo service codedeploy-agent status
      
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}


     # Linux Instance with Apache running on Port 80
    AmazonLinuxInstance1:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.nano
        KeyName:
          Ref: SSHKeyName
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install ruby -y
            sudo yum install wget -y
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent status
            sudo service codedeploy-agent status
          
            /opt/aws/bin/cfn-signal \
              -e $? \
              --stack ${AWS::StackName} \
              --resource AmazonLinuxInstance \
              --region ${AWS::Region}


    # Linux Instance with Apache running on Port 80
    # AmazonLinuxInstance1:
    #   Type: AWS::EC2::Instance
    #   Properties:
    #     ImageId:
    #       Fn::FindInMap:
    #         - RegionToAmazonAMI
    #         - Ref: 'AWS::Region'
    #         - HVM64
    #     InstanceInitiatedShutdownBehavior: stop
    #     InstanceType: t2.nano
    #     KeyName:
    #       Ref: SSHKeyName
    #     Monitoring: 'true'
    #     NetworkInterfaces:
    #     - AssociatePublicIpAddress: 'true'
    #       DeviceIndex: '0'
    #       GroupSet:
    #       - !Ref EC2SecurityGroup
    #       SubnetId:
    #         Ref: PubSubnetZoneB
    #     Tenancy: default
    #     UserData:
    #       Fn::Base64: !Sub |
    #         #!/bin/bash -xe
    #         cd /tmp
    #         yum update -y
    #         yum install -y httpd24
    #         echo "Healthy2" > /var/www/html/index.html
    #         service httpd start
    #         /opt/aws/bin/cfn-signal \
    #           -e $? \
    #           --stack ${AWS::StackName} \
    #           --resource AmazonLinuxInstance \
    #           --region ${AWS::Region}
    #           
    #           
    #           

    # Target Group
    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            Ref: AmazonLinuxInstance
          Port: 80
        UnhealthyThresholdCount: 3
        VpcId: !Ref VpcId
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets: !Ref Subnets
        SecurityGroups: 
            - !Ref InstanceSecurityGroup

Outputs:

    VPC:
        Description: 'Virtual Private Cloud'
        Value: !Ref VpcId
    ALBHostName:
        Description: 'Application Load Balancer Hostname'
        Value:
          !GetAtt ApplicationLoadBalancer.DNSName
    EC2Instance:
        Description: 'EC2 Instance'
        Value:
          Ref: AmazonLinuxInstance
    EC2TargetGroup:
        Description: 'EC2 Target Group'
        Value:
          Ref: EC2TargetGroup
    ApplicationLoadBalancer:
        Description: 'Application Load Balancer'
        Value:
          Ref: ApplicationLoadBalancer
